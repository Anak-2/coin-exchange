// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: DataModel.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct PCandle: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `open`: Double = 0

  var close: Double = 0

  var high: Double = 0

  var low: Double = 0

  var volume: Double = 0

  var time: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PCandle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PCandle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "open"),
    2: .same(proto: "close"),
    3: .same(proto: "high"),
    4: .same(proto: "low"),
    5: .same(proto: "volume"),
    6: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.`open`) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.close) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.high) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.low) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.volume) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.`open`.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.`open`, fieldNumber: 1)
    }
    if self.close.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.close, fieldNumber: 2)
    }
    if self.high.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.high, fieldNumber: 3)
    }
    if self.low.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.low, fieldNumber: 4)
    }
    if self.volume.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.volume, fieldNumber: 5)
    }
    if !self.time.isEmpty {
      try visitor.visitSingularStringField(value: self.time, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PCandle, rhs: PCandle) -> Bool {
    if lhs.`open` != rhs.`open` {return false}
    if lhs.close != rhs.close {return false}
    if lhs.high != rhs.high {return false}
    if lhs.low != rhs.low {return false}
    if lhs.volume != rhs.volume {return false}
    if lhs.time != rhs.time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
